// This is your Prisma schema file,
// learn more about it in the docs https//pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate https//pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Guild {
  id      String   @id
  users   User[]
  tickets Ticket[]
  roles   Role[]
  config  Config?
}

model User {
  id          String       @id
  name        String
  displayName String
  preferences Preferences?
  guilds      Guild[]

  ticket      Ticket[] @relation("TicketUsers")
  ticketOwnew Ticket[] @relation("TickerOwner")
  ticketClaim Ticket[] @relation("TicketTeams")
}

model Preferences {
  id             Int    @id @default(autoincrement())
  userId         String @unique
  categoryTicket String

  user User? @relation(fields: [userId], references: [id])
}

model Config {
  tickets TicketConfig?
  guildId String        @unique

  guild Guild @relation(fields: [guildId], references: [id])
}

model Role {
  id      String @id @unique
  name    String
  guildId String @unique

  guild Guild @relation(fields: [guildId], references: [id])
}

model History {
  id        Int      @id @default(autoincrement())
  role      String
  userId    String
  messageId Int
  ticketId  Int?
  date      DateTime
  deleted   Boolean

  Ticket  Ticket? @relation(fields: [ticketId], references: [id])
  message Message @relation(fields: [messageId], references: [id])
}

model Ticket {
  id           Int    @id @default(autoincrement())
  guildId      String
  ownerId      String
  voiceId      Int?
  channelId    String
  messageId    String
  categoriesId Int

  closed      Boolean  @default(false)
  description String?
  createAt    DateTime @default(now())

  messages Message[]
  history  History[]

  // Relacionamentos
  owner    User             @relation("TickerOwner", fields: [ownerId], references: [id])
  Guild    Guild            @relation(fields: [guildId], references: [id])
  claim    Message?         @relation("TicketClaim")
  voice    Voice?           @relation("TicketVoice")
  users    User[]           @relation("TicketUsers")
  team     User[]           @relation("TicketTeams")
  category TicketCategories @relation(fields: [categoriesId], references: [id])
}

model Voice {
  id       String @id @unique
  ticketId Int    @unique

  Ticket Ticket @relation(fields: [ticketId], references: [id], name: "TicketVoice")
}

model Message {
  id        Int     @id @default(autoincrement())
  channelId String
  messageId String
  content   String?

  ticketId Int? @unique
  claimId  Int? @unique

  History History[]

  Ticket Ticket? @relation(fields: [ticketId], references: [id])
  Claim  Ticket? @relation(fields: [claimId], references: [id], name: "TicketClaim")
}

model TicketCategories {
  id     Int      @id @default(autoincrement())
  title  String
  emoji  String
  Ticket Ticket[]
}

model TicketConfig {
  id      Int    @id @default(autoincrement())
  guildId String @unique

  claimLimit Int?
  limit      Int?
  claimId    String?
  logsId     String?
  roleId     String?

  config Config @relation(fields: [guildId], references: [guildId])
}
